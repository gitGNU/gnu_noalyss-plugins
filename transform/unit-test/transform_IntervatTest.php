<?php

/**
 * Testing of class_intervat
 *  phpunit-skelgen --bootstrap bootstrap.php --test -- Intervat ../include/class_transform_intervat.php
 * phpunit  --tap --colors --bootstrap bootstrap.php transform_IntervatTest.php 
 * @author dany
 * Expected result
 * @code
 * <?xml version="1.0" encoding="ISO-8859-1"?>
  <ns2:ClientListingConsignment xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment" xmlns="http://www.minfin.fgov.be/InputCommon" ClientListingsNbr="1">
  <ns2:Representative>
  <RepresentativeID identificationType="TIN" issuedBy="BE">0000000097</RepresentativeID>
  <Name>Nom Mandataire</Name>
  <Street>Nom de rue</Street>
  <PostCode>9999</PostCode>
  <City>TESTCITY</City>
  <CountryCode>BE</CountryCode>
  <EmailAddress>dany@alch.be</EmailAddress>
  <Phone>000000000</Phone>
  </ns2:Representative>
  <ns2:ClientListing VATAmountSum="0" TurnOverSum="0" ClientsNbr="2" SequenceNumber="1">
  <ns2:Declarant>
  <VATNumber>0000000097</VATNumber>
  <Name>Nom Déclarant</Name>
  <Street>Rue du déclarant</Street>
  <PostCode>9999</PostCode>
  <City>TESTCITY</City>
  <CountryCode>BE</CountryCode>
  <EmailAddress>dany@alch.be</EmailAddress>
  <Phone>000000000</Phone>
  </ns2:Declarant>
  <ns2:Period>2009</ns2:Period>
  <ns2:Client SequenceNumber="1">
  <ns2:CompanyVATNumber issuedBy="BE">0000000097</ns2:CompanyVATNumber>
  <ns2:TurnOver>500</ns2:TurnOver>
  <ns2:VATAmount>0</ns2:VATAmount>
  </ns2:Client>
  <ns2:Client SequenceNumber="2">
  <ns2:CompanyVATNumber issuedBy="BE">0000000097</ns2:CompanyVATNumber>
  <ns2:TurnOver>500</ns2:TurnOver>
  <ns2:VATAmount>0</ns2:VATAmount>
  </ns2:Client>
  <ns2:Comment>Commentaire</ns2:Comment>
  </ns2:ClientListing>
  </ns2:ClientListingConsignment>
 * @endcode
 * 
 */
require_once 'bootstrap.php';

require_once 'class_transform_representative.php';
require_once 'class_dossier.php';
global $cn, $g_parameter;
        $cn = new Database(26);
        $g_parameter = new Own($cn);
        $_REQUEST['gDossier'] = 26;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-25 at 18:01:08.
 */
class IntervatTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Intervat
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @backupGlobals enabled
     */
    protected function setUp()
    {
        $this->object = new Transform_Intervat;
        $this->result = '<?xml version="1.0" encoding="ISO-8859-1"?>
<ns2:ClientListingConsignment xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment" xmlns="http://www.minfin.fgov.be/InputCommon" ClientListingsNbr="1">
  <ns2:Representative>
    <RepresentativeID identificationType="TIN" issuedBy="BE">0000000097</RepresentativeID>
    <Name>Nom Mandataire</Name>
    <Street>Nom de rue</Street>
    <PostCode>9999</PostCode>
    <City>TESTCITY</City>
    <CountryCode>BE</CountryCode>
    <EmailAddress>dany@alch.be</EmailAddress>
    <Phone>000000000</Phone>
  </ns2:Representative>
  <ns2:ClientListing VATAmountSum="0" TurnOverSum="0" ClientsNbr="2" SequenceNumber="1">
    <ns2:Declarant>
      <VATNumber>0000000097</VATNumber>
      <Name>Nom Declarant</Name>
      <Street>Rue du declarant</Street>
      <PostCode>9999</PostCode>
      <City>TESTCITY</City>
      <CountryCode>BE</CountryCode>
      <EmailAddress>dany@alch.be</EmailAddress>
      <Phone>000000000</Phone>
    </ns2:Declarant>
    <ns2:Period>2009</ns2:Period>
    <ns2:Client SequenceNumber="1">
      <ns2:CompanyVATNumber issuedBy="BE">0000000097</ns2:CompanyVATNumber>
      <ns2:TurnOver>500</ns2:TurnOver>
      <ns2:VATAmount>0</ns2:VATAmount>
    </ns2:Client>
    <ns2:Client SequenceNumber="2">
      <ns2:CompanyVATNumber issuedBy="BE">0000000097</ns2:CompanyVATNumber>
      <ns2:TurnOver>500</ns2:TurnOver>
      <ns2:VATAmount>0</ns2:VATAmount>
    </ns2:Client>
    <ns2:Comment>Commentaire</ns2:Comment>
  </ns2:ClientListing>
</ns2:ClientListingConsignment>
';
        
        $this->request = new Transform_Request_SQL;
        $this->request->r_type = 'phpunit-intervat';
        $this->request->insert();

        $this->representative = new Transform_Representative();
        $this->representative->data->r_id = $this->request->r_id;
        $this->representative->id = "0000000097";
        $this->representative->issued = "BE";
        $this->representative->type = 'TIN';
        $this->representative->name = "Nom Mandataire";
        $this->representative->street = "Nom de rue";
        $this->representative->postcode = "9999";
        $this->representative->city = "TESTCITY";
        $this->representative->countrycode = "BE";
        $this->representative->email = "dany@alch.be";
        $this->representative->phone = "000000000";
        $this->representative->insert();
        /*
         * Variables
         */
        $this->declarant = new Transform_Declarant();
        $this->declarant->data->r_id = $this->request->r_id;
        $this->declarant->vat_number = "0000000097";
        $this->declarant->name = "Nom Declarant";
        $this->declarant->street = "Rue du declarant";
        $this->declarant->postcode = "9999";
        $this->declarant->city = "TESTCITY";
        $this->declarant->countrycode = "BE";
        $this->declarant->email = "dany@alch.be";
        $this->declarant->phone = "000000000";
        $this->declarant->insert();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Intervat::append_root
     * @backupGlobals enabled
     * @todo   Implement testAppend_root().
     */
    public function testAppend_root()
    {
        $this->object->append_root();
        $result = $this->object->domdoc->saveXML();
        $must_march = '<?xml version="1.0" encoding="ISO-8859-1"?>     
	<ns2:ClientListingConsignment xmlns="http://www.minfin.fgov.be/InputCommon" xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment" ClientListingsNbr="1">';
        $this->assertContains('<?xml version="1.0" encoding="ISO-8859-1"?>', $result);
        $this->assertContains('<ns2:ClientListingConsignment', $result);
        $this->assertContains('xmlns="http://www.minfin.fgov.be/InputCommon"', $result);
        $this->assertContains('xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment"', $result);
        $this->assertContains('ClientListingsNbr="1"', $result);
    }

    /**
     * @covers Intervat::append_representative
     * @backupGlobals enabled
     * @todo   Implement testAppend_representative().
     */
    public function testAppend_representative()
    {
        $_REQUEST['gDossier'] = 26;
        $this->object->append_root();
        $this->object->append_representative($this->representative);
        $result = $this->object->domdoc->saveXML();
        $this->assertContains('ns2:Representative', $result);
    }

    /**
     * @covers Intervat::append_client_listing
     * @backupGlobals enabled
     * @todo   Implement testAppend_client_listing().
     */
    public function testAppend_client_listing()
    {
        $this->object->append_root();
        $this->object->append_representative($this->representative);
        $this->object->append_client_listing($this->declarant);
        $result = $this->object->domdoc->saveXML();
        $this->assertEquals($this->result, $result);
    }

    /**
     * @covers Intervat::append_declarant
     * @backupGlobals enabled
     * @todo   Implement testAppend_declarant().
     */
    public function testAppend_declarant()
    {
        $this->object->append_root();
        $dom = $this->object->domdoc->createElement("Listing");
        $this->object->append_declarant($dom, $this->declarant);
        $this->object->domdoc->appendChild($dom);
        $result = $this->object->domdoc->saveXML();
        $expected = '<?xml version="1.0" encoding="ISO-8859-1"?>
<ns2:ClientListingConsignment xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment" xmlns="http://www.minfin.fgov.be/InputCommon" ClientListingsNbr="1"/>
<Listing xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment">
  <ns2:Declarant xmlns:ns2="http://www.minfin.fgov.be/ClientListingConsignment">
    <VATNumber>0000000097</VATNumber>
    <Name>Nom Declarant</Name>
    <Street>Rue du declarant</Street>
    <PostCode>9999</PostCode>
    <City>TESTCITY</City>
    <CountryCode>BE</CountryCode>
    <EmailAddress>dany@alch.be</EmailAddress>
    <Phone>000000000</Phone>
  </ns2:Declarant>
</Listing>
';
        $this->assertEquals($expected, $result);
    }

    function call_inline()
    {
        $this->setUp();
    }

}
